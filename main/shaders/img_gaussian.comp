/*
 * Copyright (C) 2024 Adrien ARNAUD
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

#version 450 core

layout(local_size_x_id = 0, local_size_y_id = 1) in;

layout(binding = 0, rgba32f) uniform readonly image2D inImg;
layout(binding = 1, rgba32f) uniform writeonly image2D outImg;
layout(std140, binding = 2) uniform Kernel { float kernel[9]; };

// Can be quieried by imageSize()
layout(push_constant) uniform Constants
{
  uint width;
  uint height;
};

void main()
{
  const uint u = gl_GlobalInvocationID.x;
  const uint v = gl_GlobalInvocationID.y;

  if(any(greaterThanEqual(uvec2(u, v), uvec2(width - 1, height - 1)))
     || any(lessThanEqual(uvec2(u, v), uvec2(0, 0))))
  {
    return;
  }

  vec3 val = kernel[0] * imageLoad(inImg, ivec2(1, 1) + ivec2(u - 1, v - 1)).rgb
             + kernel[1] * imageLoad(inImg, ivec2(1, 1) + ivec2(u, v - 1)).rgb
             + kernel[2] * imageLoad(inImg, ivec2(1, 1) + ivec2(u + 1, v - 1)).rgb
             + kernel[3] * imageLoad(inImg, ivec2(1, 1) + ivec2(u - 1, v)).rgb
             + kernel[4] * imageLoad(inImg, ivec2(1, 1) + ivec2(u, v)).rgb
             + kernel[5] * imageLoad(inImg, ivec2(1, 1) + ivec2(u + 1, v)).rgb
             + kernel[6] * imageLoad(inImg, ivec2(1, 1) + ivec2(u - 1, v + 1)).rgb
             + kernel[7] * imageLoad(inImg, ivec2(1, 1) + ivec2(u, v + 1)).rgb
             + kernel[8] * imageLoad(inImg, ivec2(1, 1) + ivec2(u + 1, v + 1)).rgb;
  imageStore(outImg, ivec2(u, v), vec4(val, 1.0));
}
