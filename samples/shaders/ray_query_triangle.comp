/*
 * Copyright (C) 2025 Adrien ARNAUD
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

#extension GL_EXT_ray_query : require

layout(local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 1, rgba32f) uniform image2D outputImage;

layout(push_constant) uniform PushConstants
{
    uint sizeX;
    uint sizeY;
};

void main()
{
    const uint idx = gl_GlobalInvocationID.x;
    const uint idy = gl_GlobalInvocationID.y;

    const vec3 org = vec3(0.0f, 0.0f, 1.0f);
    const vec3 dir = normalize(vec3(
        -1.0f + 2.0f * float(idx) / float(sizeX),
        -1.0f + 2.0f * float(sizeY - idy - 1) / float(sizeY),
        -1.0f));

    rayQueryEXT rayQuery;
    rayQueryInitializeEXT(
        rayQuery, topLevelAS, gl_RayFlagsTerminateOnFirstHitEXT, 0xFF, org, 0.001f, dir, 20.0f);
    rayQueryProceedEXT(rayQuery);

    vec4 color = vec4(0.0f, 0.0f, 0.0f, 1.0f);
    if(rayQueryGetIntersectionTypeEXT(rayQuery, true)
       == gl_RayQueryCommittedIntersectionTriangleEXT)
    {
        color.r = 1.0f;
    }
    imageStore(outputImage, ivec2(idx, idy), color);
}
