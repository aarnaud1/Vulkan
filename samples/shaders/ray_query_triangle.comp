/*
 * Copyright (c) 2025 Adrien ARNAUD
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#extension GL_EXT_ray_query : require

layout(local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 1, rgba32f) uniform image2D outputImage;

layout(push_constant) uniform PushConstants
{
    uint sizeX;
    uint sizeY;
};

void main()
{
    const uint idx = gl_GlobalInvocationID.x;
    const uint idy = gl_GlobalInvocationID.y;

    const vec3 org = vec3(0.0f, 0.0f, 1.0f);
    const vec3 dir = normalize(vec3(
        -1.0f + 2.0f * float(idx) / float(sizeX),
        -1.0f + 2.0f * float(sizeY - idy - 1) / float(sizeY),
        -1.0f));

    rayQueryEXT rayQuery;
    rayQueryInitializeEXT(
        rayQuery, topLevelAS, gl_RayFlagsTerminateOnFirstHitEXT, 0xFF, org, 0.001f, dir, 20.0f);
    rayQueryProceedEXT(rayQuery);

    vec4 color = vec4(0.0f, 0.0f, 0.0f, 1.0f);
    if(rayQueryGetIntersectionTypeEXT(rayQuery, true)
       == gl_RayQueryCommittedIntersectionTriangleEXT)
    {
        color.r = 1.0f;
    }
    imageStore(outputImage, ivec2(idx, idy), color);
}
